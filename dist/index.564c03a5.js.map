{"mappings":"ACGA,MAAM,EACJ,CAAC,CAAW,CACV,SAAS,aAAa,CAAC,kCACvB,AACF,EAAC,CAAa,CACZ,SAAS,gBAAgB,CAAC,+BAC1B,AAKF,cAAc,CACZ,IAAI,CAAC,CAAC,CAAW,CAAC,gBAAgB,CAChC,QACA,IAAI,CAAC,CAAC,CAAiB,CAAC,IAAI,CAAC,IAAI,EAErC,CAKA,CAAC,CAAiB,CAAC,CAAM,EACvB,IAAI,CAAC,CAAC,CAAa,CAAC,OAAO,CAAC,SAAU,CAAY,EAE5C,AADoD,EAChC,SAAS,CAAC,QAAQ,CAAC,YACzC,AAFsD,EAElC,SAAS,CAAC,MAAM,CAAC,UACrC,AAHsD,EAGlC,SAAS,CAAC,GAAG,CAAC,QAMlC,AAFE,SAAS,aAAa,CAAC,qCAEN,WAAW,CAAG,IAErC,EACF,CACF,CAEA,IAAI","sources":["<anon>","src/notifications.js"],"sourcesContent":["var $48576884b3fd8942$exports = {};\n/**\n * A notification page component\n */ class $48576884b3fd8942$var$NotificationPageComponent {\n    #markReadBtn = /** @type {HTMLButtonElement} */ document.querySelector(\".notification--page_removed-btn\");\n    #notifications = /** @type {NodeList} */ document.querySelectorAll(\".notification--page_activity\");\n    /**\n   * Constructor expects no argument. When called an event listener is added to the button.\n   */ constructor(){\n        this.#markReadBtn.addEventListener(\"click\", this.#readNotifications.bind(this));\n    }\n    /**\n   * @param {Event} evtObj\n   */ #readNotifications(evtObj) {\n        this.#notifications.forEach(function(notification) {\n            const notificationElement = /** @type {HTMLElement }*/ notification;\n            if (notificationElement.classList.contains(\"unread\")) {\n                notificationElement.classList.remove(\"unread\");\n                notificationElement.classList.add(\"read\");\n                // We need to get the number of notifications which is currently on 3 and set the value to 0 meaning the user no longer has any notifications\n                const notificationAmount = /** @type {HTMLElement} */ document.querySelector(\".notification--page_amount > span\");\n                notificationAmount.textContent = \"0\";\n            }\n        });\n    }\n}\nnew $48576884b3fd8942$var$NotificationPageComponent();\n\n\n//# sourceMappingURL=index.564c03a5.js.map\n","/**\n * A notification page component\n */\nclass NotificationPageComponent {\n  #markReadBtn = /** @type {HTMLButtonElement} */ (\n    document.querySelector('.notification--page_removed-btn')\n  );\n  #notifications = /** @type {NodeList} */ (\n    document.querySelectorAll('.notification--page_activity')\n  );\n\n  /**\n   * Constructor expects no argument. When called an event listener is added to the button.\n   */\n  constructor() {\n    this.#markReadBtn.addEventListener(\n      'click',\n      this.#readNotifications.bind(this)\n    );\n  }\n\n  /**\n   * @param {Event} evtObj\n   */\n  #readNotifications(evtObj) {\n    this.#notifications.forEach(function (notification) {\n      const notificationElement = /** @type {HTMLElement }*/ (notification);\n      if (notificationElement.classList.contains('unread')) {\n        notificationElement.classList.remove('unread');\n        notificationElement.classList.add('read');\n\n        // We need to get the number of notifications which is currently on 3 and set the value to 0 meaning the user no longer has any notifications\n        const notificationAmount = /** @type {HTMLElement} */ (\n          document.querySelector('.notification--page_amount > span')\n        );\n        notificationAmount.textContent = '0';\n      }\n    });\n  }\n}\n\nnew NotificationPageComponent();\n"],"names":["$48576884b3fd8942$var$NotificationPageComponent","markReadBtn","document","querySelector","notifications","querySelectorAll","constructor","addEventListener","readNotifications","bind","evtObj","forEach","notification","notificationElement","classList","contains","remove","add","notificationAmount","textContent"],"version":3,"file":"index.564c03a5.js.map"}